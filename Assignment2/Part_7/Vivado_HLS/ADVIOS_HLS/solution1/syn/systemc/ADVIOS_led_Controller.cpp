// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ADVIOS_led_Controller.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ADVIOS_led_Controller::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ADVIOS_led_Controller::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> ADVIOS_led_Controller::ap_ST_fsm_state2 = "10";
const sc_lv<4> ADVIOS_led_Controller::ap_ST_fsm_state3 = "100";
const sc_lv<4> ADVIOS_led_Controller::ap_ST_fsm_state4 = "1000";
const sc_lv<32> ADVIOS_led_Controller::ap_const_lv32_2 = "10";
const sc_lv<1> ADVIOS_led_Controller::ap_const_lv1_1 = "1";
const sc_lv<32> ADVIOS_led_Controller::ap_const_lv32_3 = "11";
const sc_lv<1> ADVIOS_led_Controller::ap_const_lv1_0 = "0";
const sc_lv<4> ADVIOS_led_Controller::ap_const_lv4_0 = "0000";
const sc_lv<4> ADVIOS_led_Controller::ap_const_lv4_1 = "1";
const sc_lv<4> ADVIOS_led_Controller::ap_const_lv4_8 = "1000";
const bool ADVIOS_led_Controller::ap_const_boolean_1 = true;

ADVIOS_led_Controller::ADVIOS_led_Controller(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ADVIOS_control_V);
    sensitive << ( ctrl );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ADVIOS_control_V_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ADVIOS_sec_counter_V_o);
    sensitive << ( tmp_3_reg_188 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_reg_192 );
    sensitive << ( tmp_read_fu_122_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_2_fu_159_p2 );

    SC_METHOD(thread_ADVIOS_sec_counter_V_o_ap_vld);
    sensitive << ( tmp_3_reg_188 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_reg_192 );
    sensitive << ( tmp_read_fu_122_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ADVIOS_switchs_V);
    sensitive << ( inSwitch );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ADVIOS_switchs_V_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_outLeds);
    sensitive << ( ADVIOS_sec_counter_V_i );
    sensitive << ( tmp_3_fu_166_p2 );
    sensitive << ( tmp_3_reg_188 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_reg_192 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( r_V_fu_172_p2 );

    SC_METHOD(thread_outLeds_ap_vld);
    sensitive << ( tmp_3_fu_166_p2 );
    sensitive << ( tmp_3_reg_188 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_reg_192 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_V_fu_172_p2);
    sensitive << ( ctrl );
    sensitive << ( inSwitch );

    SC_METHOD(thread_sec_pulse_o);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_read_fu_122_p2 );

    SC_METHOD(thread_sec_pulse_o_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_read_fu_122_p2 );

    SC_METHOD(thread_tmp_2_fu_159_p2);
    sensitive << ( ADVIOS_sec_counter_V_i );

    SC_METHOD(thread_tmp_3_fu_166_p2);
    sensitive << ( ctrl );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_4_fu_179_p2);
    sensitive << ( inSwitch );
    sensitive << ( tmp_3_fu_166_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_read_fu_122_p2);
    sensitive << ( sec_pulse_i );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "0010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ADVIOS_led_Controller_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ctrl, "(port)ctrl");
    sc_trace(mVcdFile, inSwitch, "(port)inSwitch");
    sc_trace(mVcdFile, outLeds, "(port)outLeds");
    sc_trace(mVcdFile, outLeds_ap_vld, "(port)outLeds_ap_vld");
    sc_trace(mVcdFile, ADVIOS_switchs_V, "(port)ADVIOS_switchs_V");
    sc_trace(mVcdFile, ADVIOS_switchs_V_ap_vld, "(port)ADVIOS_switchs_V_ap_vld");
    sc_trace(mVcdFile, ADVIOS_control_V, "(port)ADVIOS_control_V");
    sc_trace(mVcdFile, ADVIOS_control_V_ap_vld, "(port)ADVIOS_control_V_ap_vld");
    sc_trace(mVcdFile, ADVIOS_sec_counter_V_i, "(port)ADVIOS_sec_counter_V_i");
    sc_trace(mVcdFile, ADVIOS_sec_counter_V_o, "(port)ADVIOS_sec_counter_V_o");
    sc_trace(mVcdFile, ADVIOS_sec_counter_V_o_ap_vld, "(port)ADVIOS_sec_counter_V_o_ap_vld");
    sc_trace(mVcdFile, sec_pulse_i, "(port)sec_pulse_i");
    sc_trace(mVcdFile, sec_pulse_o, "(port)sec_pulse_o");
    sc_trace(mVcdFile, sec_pulse_o_ap_vld, "(port)sec_pulse_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_3_fu_166_p2, "tmp_3_fu_166_p2");
    sc_trace(mVcdFile, tmp_3_reg_188, "tmp_3_reg_188");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_4_fu_179_p2, "tmp_4_fu_179_p2");
    sc_trace(mVcdFile, tmp_4_reg_192, "tmp_4_reg_192");
    sc_trace(mVcdFile, tmp_read_fu_122_p2, "tmp_read_fu_122_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_2_fu_159_p2, "tmp_2_fu_159_p2");
    sc_trace(mVcdFile, r_V_fu_172_p2, "r_V_fu_172_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

ADVIOS_led_Controller::~ADVIOS_led_Controller() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ADVIOS_led_Controller::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_3_reg_188 = tmp_3_fu_166_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_3_fu_166_p2.read(), ap_const_lv1_1))) {
        tmp_4_reg_192 = tmp_4_fu_179_p2.read();
    }
}

void ADVIOS_led_Controller::thread_ADVIOS_control_V() {
    ADVIOS_control_V = ctrl.read();
}

void ADVIOS_led_Controller::thread_ADVIOS_control_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ADVIOS_control_V_ap_vld = ap_const_logic_1;
    } else {
        ADVIOS_control_V_ap_vld = ap_const_logic_0;
    }
}

void ADVIOS_led_Controller::thread_ADVIOS_sec_counter_V_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_188.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_4_reg_192.read(), ap_const_lv1_1))) {
        ADVIOS_sec_counter_V_o = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_read_fu_122_p2.read()))) {
        ADVIOS_sec_counter_V_o = tmp_2_fu_159_p2.read();
    } else {
        ADVIOS_sec_counter_V_o = "XXXX";
    }
}

void ADVIOS_led_Controller::thread_ADVIOS_sec_counter_V_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_read_fu_122_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_3_reg_188.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(tmp_4_reg_192.read(), ap_const_lv1_1)))) {
        ADVIOS_sec_counter_V_o_ap_vld = ap_const_logic_1;
    } else {
        ADVIOS_sec_counter_V_o_ap_vld = ap_const_logic_0;
    }
}

void ADVIOS_led_Controller::thread_ADVIOS_switchs_V() {
    ADVIOS_switchs_V = inSwitch.read();
}

void ADVIOS_led_Controller::thread_ADVIOS_switchs_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ADVIOS_switchs_V_ap_vld = ap_const_logic_1;
    } else {
        ADVIOS_switchs_V_ap_vld = ap_const_logic_0;
    }
}

void ADVIOS_led_Controller::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ADVIOS_led_Controller::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ADVIOS_led_Controller::thread_outLeds() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_188.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_4_reg_192.read(), ap_const_lv1_1))) {
        outLeds = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_3_reg_188.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(tmp_4_reg_192.read(), ap_const_lv1_0))) {
        outLeds = ADVIOS_sec_counter_V_i.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(tmp_3_fu_166_p2.read(), ap_const_lv1_0))) {
        outLeds = r_V_fu_172_p2.read();
    } else {
        outLeds = "XXXX";
    }
}

void ADVIOS_led_Controller::thread_outLeds_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_3_reg_188.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(tmp_4_reg_192.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_3_reg_188.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(tmp_4_reg_192.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_3_fu_166_p2.read(), ap_const_lv1_0)))) {
        outLeds_ap_vld = ap_const_logic_1;
    } else {
        outLeds_ap_vld = ap_const_logic_0;
    }
}

void ADVIOS_led_Controller::thread_r_V_fu_172_p2() {
    r_V_fu_172_p2 = (ctrl.read() & inSwitch.read());
}

void ADVIOS_led_Controller::thread_sec_pulse_o() {
    sec_pulse_o =  (sc_logic) (ap_const_lv1_0[0]);
}

void ADVIOS_led_Controller::thread_sec_pulse_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_read_fu_122_p2.read()))) {
        sec_pulse_o_ap_vld = ap_const_logic_1;
    } else {
        sec_pulse_o_ap_vld = ap_const_logic_0;
    }
}

void ADVIOS_led_Controller::thread_tmp_2_fu_159_p2() {
    tmp_2_fu_159_p2 = (!ADVIOS_sec_counter_V_i.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(ADVIOS_sec_counter_V_i.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void ADVIOS_led_Controller::thread_tmp_3_fu_166_p2() {
    tmp_3_fu_166_p2 = (!ctrl.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(ctrl.read() == ap_const_lv4_0);
}

void ADVIOS_led_Controller::thread_tmp_4_fu_179_p2() {
    tmp_4_fu_179_p2 = (!inSwitch.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(inSwitch.read() == ap_const_lv4_8);
}

void ADVIOS_led_Controller::thread_tmp_read_fu_122_p2() {
    tmp_read_fu_122_p2 =  (sc_lv<1>) (sec_pulse_i.read());
}

void ADVIOS_led_Controller::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}


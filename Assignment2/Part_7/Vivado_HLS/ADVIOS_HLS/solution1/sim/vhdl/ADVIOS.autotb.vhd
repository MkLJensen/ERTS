-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee;
use ieee.std_logic_1164.all;
use std.textio.all;

library work;
use work.AESL_sim_components.all;

entity AUTOTB_TOP is
end entity;

architecture behavior of AUTOTB_TOP is

signal AESL_clock : STD_LOGIC := '0';
signal reset :  STD_LOGIC;
signal ctrl :  STD_LOGIC_VECTOR (3 DOWNTO 0);
signal inSwitch :  STD_LOGIC_VECTOR (3 DOWNTO 0);
signal outLeds :  STD_LOGIC_VECTOR (3 DOWNTO 0);

file AESL_errlog : TEXT;
component advios is
port (
    clk :  IN STD_LOGIC;
    reset :  IN STD_LOGIC;
    ctrl :  IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    inSwitch :  IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    outLeds :  OUT STD_LOGIC_VECTOR (3 DOWNTO 0));
end component;

begin
    DUT_INST : component advios
    port map (
        clk =>  AESL_clock,
        reset =>  reset,
        ctrl =>  ctrl,
        inSwitch =>  inSwitch,
        outLeds =>  outLeds);

    AESL_clock <= not AESL_clock  after 4.0 ns;

    proc_tv_in : process
    file AESL_mTv : TEXT;
    variable AESL_mLine : LINE;
variable AESL_errline: LINE;
    variable AESL_token: STRING(1 to 1024);
    variable AESL_token_value: STRING(1 to 1024);
    variable AESL_token_len: INTEGER;
    variable AESL_cycleNo: INTEGER;
    begin
    ----initialize with data on first cycle
    AESL_cycleNo := 0;
        file_open(AESL_errlog,  "err.log", WRITE_MODE);
        file_open(AESL_mTv,  "advios.hdltvin.dat", READ_MODE);
        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
        if AESL_token(1 to 1) /=  "[" then
        write(AESL_errline, string'("Illegal tv format of file advios.hdltvin.dat"));
        writeline(AESL_errlog, AESL_errline);
            assert false report "Illegal tv format of file advios.hdltvin.dat" severity note;
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
        if AESL_token(1 to 1) /= "]" then
        if AESL_token(1 to 1) /=  "{" then
        write(AESL_errline, string'("Illegal tv format of file advios.hdltvin.dat"));
        writeline(AESL_errlog, AESL_errline);
            assert false report "Illegal tv format of file advios.hdltvin.dat" severity note;
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
    
        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
        while AESL_token(1 to 1) /=  "}" loop
                if AESL_token(2 to 5 + 1) =  "reset" and AESL_token(5 + 2) = '"' then
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) /=  ":" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    AESL_token_value(1 to 1) := AESL_token(2 to 1 + 1);
                    esl_assign_l(reset, AESL_token_value);
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) =  "," then
                        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    elsif AESL_token(1 to 1) /=  "}" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                elsif AESL_token(2 to 4 + 1) =  "ctrl" and AESL_token(4 + 2) = '"' then
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) /=  ":" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    AESL_token_value(1 to 4) := AESL_token(2 to 4 + 1);
                    esl_assign_lv(ctrl, AESL_token_value);
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) =  "," then
                        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    elsif AESL_token(1 to 1) /=  "}" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                elsif AESL_token(2 to 8 + 1) =  "inSwitch" and AESL_token(8 + 2) = '"' then
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) /=  ":" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    AESL_token_value(1 to 4) := AESL_token(2 to 4 + 1);
                    esl_assign_lv(inSwitch, AESL_token_value);
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) =  "," then
                        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    elsif AESL_token(1 to 1) /=  "}" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                else
                    assert false report "warning: unknown token " &  AESL_token &
                        " in file advios.hdltvin.dat" severity note;
                end if;
        end loop;
        end if;
        file_close(AESL_mTv);


    -----real input

        file_open(AESL_mTv,  "advios.hdltvin.dat", READ_MODE);
        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);

        wait until AESL_clock = '1';
            if AESL_token(1 to 1) /=  "[" then
        write(AESL_errline, string'("Illegal tv format of file advios.hdltvin.dat"));
        writeline(AESL_errlog, AESL_errline);
                assert false report "Illegal tv format of file advios.hdltvin.dat" severity note;
                assert false report "ERROR: Simulation using HLS TB failed." severity failure;
            end if;
    
            esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
            while (AESL_token(1 to 1) /= "]" and AESL_token(1 to 1) /= " ") loop
            if AESL_token(1 to 1) /=  "{" then
        write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
        writeline(AESL_errlog, AESL_errline);
                assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                assert false report "ERROR: Simulation using HLS TB failed." severity failure;
            end if;
    
            esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
            while AESL_token(1 to 1) /=  "}" loop
                if AESL_token(2 to 5 + 1) =  "reset" and AESL_token(5 + 2) = '"' then
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) /=  ":" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    AESL_token_value(1 to 1) := AESL_token(2 to 1 + 1);
                    esl_assign_l(reset, AESL_token_value);
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) =  "," then
                        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    elsif AESL_token(1 to 1) /=  "}" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                elsif AESL_token(2 to 4 + 1) =  "ctrl" and AESL_token(4 + 2) = '"' then
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) /=  ":" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    AESL_token_value(1 to 4) := AESL_token(2 to 4 + 1);
                    esl_assign_lv(ctrl, AESL_token_value);
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) =  "," then
                        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    elsif AESL_token(1 to 1) /=  "}" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                elsif AESL_token(2 to 8 + 1) =  "inSwitch" and AESL_token(8 + 2) = '"' then
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) /=  ":" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    AESL_token_value(1 to 4) := AESL_token(2 to 4 + 1);
                    esl_assign_lv(inSwitch, AESL_token_value);
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) =  "," then
                        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    elsif AESL_token(1 to 1) /=  "}" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvin.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvin.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                else
                    assert false report "warning: unknown token " &  AESL_token &
                        " in file advios.hdltvin.dat" severity note;
                end if;
            end loop;
            esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
        if AESL_token(1 to 1) =  "," then
            esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
        elsif AESL_token(1 to 1) /=  "]" then
            assert false report "Expected end ']' in file advios.hdltvin.dat" severity note;
        end if;
    AESL_cycleNo := AESL_cycleNo + 1;
        wait until AESL_clock = '1';
        end loop;
        file_close(AESL_mTv);
        wait;
    end process;

    proc_tv_out : process
    file AESL_mTv : TEXT;
    variable AESL_mLine : LINE;
variable AESL_errline: LINE;
    variable AESL_token: STRING(1 to 1024);
    variable AESL_token_value: STRING(1 to 1024);
    variable AESL_token_len: INTEGER;
    variable AESL_cycleNo: INTEGER;
    variable AESL_isok: BOOLEAN;
    variable AESL_dontcare: BOOLEAN;
    begin
        wait until AESL_clock = '1';
        file_open(AESL_mTv,  "advios.hdltvout.dat", READ_MODE);

        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
            if AESL_token(1 to 1) /=  "[" then
        write(AESL_errline, string'("illegal tv format of file advios.hdltvout.dat"));
        writeline(AESL_errlog, AESL_errline);
                assert false report "illegal tv format of file advios.hdltvout.dat" severity note;
                assert false report "ERROR: Simulation using HLS TB failed." severity failure;
            end if;
            AESL_cycleNo := 0;
        esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
        while (AESL_token(1) /= ']' and AESL_token(1) /= ' ') loop
        wait until AESL_clock = '1';
            if AESL_token(1 to 1) /=  "{" then
        write(AESL_errline, string'("illegal tv format of file advios.hdltvout.dat"));
        writeline(AESL_errlog, AESL_errline);
                assert false report "illegal tv format of file advios.hdltvout.dat" severity note;
                assert false report "ERROR: Simulation using HLS TB failed." severity failure;
            end if;

            esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
            while AESL_token(1 to 1) /=  "}" loop
                if AESL_token(2 to 7 + 1) =  "outLeds" and AESL_token(7 + 2) = '"' then
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) /=  ":" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvout.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvout.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    AESL_dontcare := (AESL_cycleNo < 4) or (reset = '1');
                    AESL_token_value(1 to 4) := AESL_token(2 to 4 + 1);
                    esl_compare_lv(outLeds,  AESL_token_value(1 to 4), AESL_dontcare, AESL_isok);
                    if not AESL_isok then
                        write(AESL_errline, "cycle #" &  integer'image(AESL_cycleNo)&
                            ": signal ""outLeds"": " &
                            esl_conv_string(outLeds) &
                            " -- " & AESL_token_value  & " (expected) unmatched");
                        writeline(AESL_errlog,  AESL_errline);
                    end if;
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    if AESL_token(1 to 1) =  "," then
                    esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
                    elsif AESL_token(1 to 1) /=  "}" then
                    write(AESL_errline, string'("illegal tv format of file advios.hdltvout.dat"));
                    writeline(AESL_errlog, AESL_errline);
                        assert false report "illegal tv format of file advios.hdltvout.dat" severity note;
                        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
                    end if;
                else
                    assert false report "warning: unknown token " &  AESL_token &
                        " in file advios.hdltvout.dat" severity note;
                end if;
            end loop;
            esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
        if AESL_token(1 to 1) =  "," then
            esl_read_token(AESL_mTv,  AESL_mLine, AESL_token);
        elsif AESL_token(1 to 1) /=  "]" then
            assert false report "Expected end ']' in file advios.hdltvout.dat" severity note;
        end if;
            AESL_cycleNo := AESL_cycleNo + 1;
        end loop;
    
        file_close(AESL_mTv);
        file_close(AESL_errlog);
        assert false report "simulation done!" severity note;
        assert false report "NORMAL EXIT (note: failure is to force the simulator to stop)" severity failure;
    end process;
    
end architecture;

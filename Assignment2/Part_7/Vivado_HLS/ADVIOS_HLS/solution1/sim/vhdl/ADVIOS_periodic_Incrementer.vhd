-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity advios_periodic_Incrementer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    advios_count_V : OUT STD_LOGIC_VECTOR (27 downto 0);
    advios_count_V_ap_vld : OUT STD_LOGIC;
    sec_pulse : OUT STD_LOGIC;
    sec_pulse_ap_vld : OUT STD_LOGIC );
end;


architecture behav of advios_periodic_Incrementer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv28_5F5E0FF : STD_LOGIC_VECTOR (27 downto 0) := "0101111101011110000011111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal tmp_1_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_V_fu_86 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal advios_count_V_assig_fu_114_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    t_V_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_121_p2 = ap_const_lv1_0))) then 
                t_V_fu_86 <= advios_count_V_assig_fu_114_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_121_p2 = ap_const_lv1_1)))) then 
                t_V_fu_86 <= ap_const_lv28_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_1_reg_139 <= tmp_1_fu_121_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    advios_count_V_assign_proc : process(tmp_1_reg_139, ap_CS_fsm_state3, advios_count_V_assig_fu_114_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_139 = ap_const_lv1_1))) then 
            advios_count_V <= ap_const_lv28_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            advios_count_V <= advios_count_V_assig_fu_114_p2;
        else 
            advios_count_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    advios_count_V_ap_vld_assign_proc : process(tmp_1_reg_139, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_139 = ap_const_lv1_1)))) then 
            advios_count_V_ap_vld <= ap_const_logic_1;
        else 
            advios_count_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    advios_count_V_assig_fu_114_p2 <= std_logic_vector(unsigned(t_V_fu_86) + unsigned(ap_const_lv28_1));
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    sec_pulse <= ap_const_logic_1;

    sec_pulse_ap_vld_assign_proc : process(tmp_1_reg_139, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_139 = ap_const_lv1_1))) then 
            sec_pulse_ap_vld <= ap_const_logic_1;
        else 
            sec_pulse_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_121_p2 <= "1" when (unsigned(t_V_fu_86) > unsigned(ap_const_lv28_5F5E0FF)) else "0";
end behav;

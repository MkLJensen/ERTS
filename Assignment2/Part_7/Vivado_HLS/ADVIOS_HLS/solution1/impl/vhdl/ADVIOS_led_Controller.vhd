-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ADVIOS_led_Controller is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ctrl : IN STD_LOGIC_VECTOR (3 downto 0);
    inSwitch : IN STD_LOGIC_VECTOR (3 downto 0);
    outLeds : OUT STD_LOGIC_VECTOR (3 downto 0);
    outLeds_ap_vld : OUT STD_LOGIC;
    ADVIOS_switchs_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    ADVIOS_switchs_V_ap_vld : OUT STD_LOGIC;
    ADVIOS_control_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    ADVIOS_control_V_ap_vld : OUT STD_LOGIC;
    ADVIOS_sec_counter_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
    ADVIOS_sec_counter_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    ADVIOS_sec_counter_V_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ADVIOS_led_Controller is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_fu_143_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ADVIOS_control_V <= ctrl;

    ADVIOS_control_V_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ADVIOS_control_V_ap_vld <= ap_const_logic_1;
        else 
            ADVIOS_control_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ADVIOS_sec_counter_V_o <= ap_const_lv4_0;

    ADVIOS_sec_counter_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_fu_137_p2, tmp_3_fu_150_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_fu_137_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_3_fu_150_p2))) then 
            ADVIOS_sec_counter_V_o_ap_vld <= ap_const_logic_1;
        else 
            ADVIOS_sec_counter_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ADVIOS_switchs_V <= inSwitch;

    ADVIOS_switchs_V_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ADVIOS_switchs_V_ap_vld <= ap_const_logic_1;
        else 
            ADVIOS_switchs_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    outLeds_assign_proc : process(ADVIOS_sec_counter_V_i, ap_CS_fsm_state3, r_V_fu_143_p2, tmp_fu_137_p2, tmp_3_fu_150_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if (((tmp_fu_137_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_3_fu_150_p2))) then 
                outLeds <= ap_const_lv4_0;
            elsif (((tmp_fu_137_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_3_fu_150_p2))) then 
                outLeds <= ADVIOS_sec_counter_V_i;
            elsif ((tmp_fu_137_p2 = ap_const_lv1_0)) then 
                outLeds <= r_V_fu_143_p2;
            else 
                outLeds <= "XXXX";
            end if;
        else 
            outLeds <= "XXXX";
        end if; 
    end process;


    outLeds_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_fu_137_p2, tmp_3_fu_150_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_fu_137_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_fu_137_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_3_fu_150_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_fu_137_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_3_fu_150_p2)))) then 
            outLeds_ap_vld <= ap_const_logic_1;
        else 
            outLeds_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_143_p2 <= (ctrl and inSwitch);
    tmp_3_fu_150_p2 <= "1" when (inSwitch = ap_const_lv4_8) else "0";
    tmp_fu_137_p2 <= "1" when (ctrl = ap_const_lv4_0) else "0";
end behav;
